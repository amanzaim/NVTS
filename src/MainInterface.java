
package prototype2;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class MainInterface extends javax.swing.JFrame {

    // sql
    private static Object sql;
    Connection conn = null;
    PreparedStatement pst = null;
    DefaultTableModel model = new DefaultTableModel();
    DefaultTableModel model1 = new DefaultTableModel();
    DefaultTableModel model2 = new DefaultTableModel();
    ResultSet rs = null;
    
    // temporary strings
    String tempname, tempid, tempdatefrom, tempdateto;
    String tab = "        ";
    String datefrom, dateto;
    
    
    public MainInterface() {
        initComponents();
        
        // for table in main menu
        Object col[] = {"VisitorID" , "VisitorName", "ResidentID" , "DateIn" , "TimeIn"};
        model.setColumnIdentifiers(col);
        jTable1.setModel(model);
        
        // for visitor table in report
        Object col1[]={"VisitorID", "VisitorName", "ResidentID", "PhotoIn", "DateIn", "TimeIn", "PhotoOut", "DateOut", "TimeOut"};
        model1.setColumnIdentifiers(col1);
        jTable2.setModel(model1);
        
        // for illegal visitor table in report
        Object col2[]={"IllegalID", "QRCodeContent", "Photo", "Date", "Time"};
        model2.setColumnIdentifiers(col2);
        jTable3.setModel(model2);
        
        conn = this.ConnectDb();
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2,dim.height/2-this.getSize().height/2);
        this.setTitle("Neighbourhood Visitor Tracking System");
        
        updateTable();
    }

    // database connection
    public static Connection ConnectDb(){
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");  
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/sys?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT" , "root","Am@nzaim123");     // check this again as well
            return conn;
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
            return null;
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        parentPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cameraPanel = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        reportPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton7 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Neighbourhood Visitor Tracking System");
        setBackground(new java.awt.Color(227, 191, 191));
        setMinimumSize(new java.awt.Dimension(900, 600));
        setPreferredSize(new java.awt.Dimension(900, 600));
        setResizable(false);

        jPanel8.setBackground(new java.awt.Color(177, 223, 220));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 560));

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Administrator\\Documents\\FYP AMAN\\UI\\Component 22 – 1.png")); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 255, 204));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Administrator\\Documents\\FYP AMAN\\UI\\Component 24 – 1.png")); // NOI18N
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Administrator\\Documents\\FYP AMAN\\UI\\Component 23 – 1.png")); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel15.setText("Camera ");
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel14.setText("Report");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel15)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(81, 81, 81))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        parentPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        parentPanel.setLayout(new java.awt.CardLayout());

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel2.setText("Welcome");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("This is the");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel4.setText("Neighbourhood Visitor Tracking System");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 242, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(106, 106, 106))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(10, 10, 10))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Latest Visitors"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(190, 190, 190))
        );

        parentPanel.add(mainPanel, "card3");

        cameraPanel.setBackground(new java.awt.Color(255, 255, 255));

        jButton6.setIcon(new javax.swing.ImageIcon("C:\\Users\\Administrator\\Documents\\FYP AMAN\\UI\\Component 16 – 1.png")); // NOI18N
        jButton6.setBorder(null);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel18.setText("( Click icon above to start scanning for qr code and capture image )");

        javax.swing.GroupLayout cameraPanelLayout = new javax.swing.GroupLayout(cameraPanel);
        cameraPanel.setLayout(cameraPanelLayout);
        cameraPanelLayout.setHorizontalGroup(
            cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cameraPanelLayout.createSequentialGroup()
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cameraPanelLayout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jButton6))
                    .addGroup(cameraPanelLayout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jLabel18)))
                .addContainerGap(220, Short.MAX_VALUE))
        );
        cameraPanelLayout.setVerticalGroup(
            cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cameraPanelLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        parentPanel.add(cameraPanel, "card2");

        reportPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel7.setText("Report");

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Filters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel8.setText("Name ");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel9.setText("ID");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel10.setText("Date");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextField1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel11.setText("From");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel12.setText("To");

        jTextField3.setText("yyyy-MM-dd");

        jTextField4.setText("yyyy-MM-dd");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField4))
                .addGap(16, 16, 16))
        );

        jButton3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton3.setText("Search Visitor");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton4.setText("Search Illegal Visitor");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton5.setText("Reset");
        jButton5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Name");

        jCheckBox3.setText("Date");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel13.setText("( Leave checkboxes blank if you want to search using all 3 filters )");

        jCheckBox2.setText("ID");

        jButton7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton7.setText("Print");
        jButton7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton7))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jCheckBox2)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCheckBox1, jCheckBox2, jCheckBox3});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton3, jButton4});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton5, jButton7});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox3)
                    .addComponent(jLabel13)
                    .addComponent(jCheckBox2))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jButton4)
                        .addComponent(jButton5))
                    .addComponent(jButton7))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton3, jButton4, jButton5, jButton7});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jCheckBox1, jCheckBox2, jCheckBox3});

        jPanel6.setLayout(new java.awt.BorderLayout());

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "VisitorID", "ResidentID", "PhotoIn", "DateIn", "TimeIn", "PhotoOut", "DateOut", "TimeOut"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jPanel6.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Visitor", jPanel6);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable3);

        jPanel7.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Illegal Visitor", jPanel7);

        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(302, 302, 302))
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap(132, Short.MAX_VALUE))
        );
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addContainerGap())
        );

        parentPanel.add(reportPanel, "card4");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(parentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // function for "reset" button
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("yyyy-MM-dd");
        jTextField4.setText("yyyy-MM-dd");
        model.setRowCount(0);
        model1.setRowCount(0);
        model2.setRowCount(0);
        updateTable();
    }//GEN-LAST:event_jButton5ActionPerformed

    // function to go camera panel
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        parentPanel.removeAll();
        parentPanel.add(cameraPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_jButton1ActionPerformed

    // function to go report panel
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        parentPanel.removeAll();
        parentPanel.add(reportPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_jButton2ActionPerformed

    // function to go to home screen on click to "MAIN MENU"
    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        parentPanel.removeAll();
        parentPanel.add(mainPanel);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_jLabel1MouseClicked

    // function for button "search visitors" DONE 
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        tempname = jTextField1.getText();
        tempid = jTextField2.getText();
        tempdatefrom = jTextField3.getText();
        tempdateto = jTextField4.getText();


        if ( jTextField1.getText().equals("") )
        {
            tempname = "empty";
        }
        if ( jTextField2.getText().equals(""))
        {
            tempid = "empty";
        }
        if ( jTextField3.getText().equals(""))
        {
            tempdatefrom = "empty";
        }
        if ( jTextField4.getText().equals(""))
        {
            tempdateto = "empty";
        }

        
        // search based on name filter
        if (jCheckBox1.isSelected()){
            if ( !"empty".equals(tempname))
            {
                // SEARCH DATABASE FOR NAME + ID ( NAME AND ID IS CHECKED ) // DONE
                if (jCheckBox2.isSelected())
                {
                    if ( JOptionPane.showConfirmDialog ( null, "Conduct a search based on the following?"
                    + "\nName = " + tempname
                            + "\nID = " + tempid, "SEARCH?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                    {
                        String sql = "Select * from visitor where VisitorName='"+tempname+"' and VisitorID='"+tempid+"'";
                        model1.setRowCount(0);
                        
                        try{ 
                            pst = conn.prepareStatement(sql);
                            rs = pst.executeQuery();
                            Object[] columnData = new Object[9];

                            while (rs.next()) {
                                columnData[0] = rs.getString("VisitorID");
                                columnData[1] = rs.getString("VisitorName");
                                columnData[2] = rs.getString("ResidentID");
                                columnData[3] = rs.getString("PhotoIn");
                                columnData[4] = rs.getString("DateEnter");
                                columnData[5] = rs.getString("TimeIn");
                                columnData[6] = rs.getString("PhotoOut");
                                columnData[7] = rs.getString("DateExit");
                                columnData[8] = rs.getString("TimeOut");
                                model1.addRow(columnData);
                            }
                        }
                        catch (Exception e){
                            JOptionPane.showMessageDialog(null,e);
                        }
                        int rows = model1.getRowCount();
                        if ((rows + 1) == 1) {
                            JOptionPane.showMessageDialog(null, "Records Not found \nPlease try again", "Not found", JOptionPane.ERROR_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Records Found!");
                        }
                    }
                }
                
                // SEARCH DATABASE FOR NAME + DATE ( NAME AND DATE IS CHECKED ) // DONE
                else if ( jCheckBox3.isSelected())
                {
                    if ( JOptionPane.showConfirmDialog ( null, "Conduct a search based on the following?"
                    + "\nName = " + tempname
                            + "\nDate From = " + tempdatefrom + tab +
                            "To= " + tempdateto, "SEARCH?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                    {
                        String sql = "Select * from visitor where VisitorName='"+tempname+"' and DateEnter between '"+tempdatefrom+"' and '"+tempdateto+"' ";
                        model1.setRowCount(0);
                        
                        try{
                            pst = conn.prepareStatement(sql);
                            rs = pst.executeQuery();
                            Object[] columnData = new Object[9];

                            while (rs.next()) {
                                columnData[0] = rs.getString("VisitorID");
                                columnData[1] = rs.getString("VisitorName");
                                columnData[2] = rs.getString("ResidentID");
                                columnData[3] = rs.getString("PhotoIn");
                                columnData[4] = rs.getString("DateEnter");
                                columnData[5] = rs.getString("TimeIn");
                                columnData[6] = rs.getString("PhotoOut");
                                columnData[7] = rs.getString("DateExit");
                                columnData[8] = rs.getString("TimeOut");
                                model1.addRow(columnData);
                            }
                        }
                        catch ( Exception e ){
                            JOptionPane.showMessageDialog(null, e);
                        }
                        int rows = model1.getRowCount();
                        if ((rows + 1) == 1) {
                            JOptionPane.showMessageDialog(null, "Records Not found \nPlease try again", "Not found", JOptionPane.ERROR_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Records Found!");
                        }
                    }
                }
                
                // SEARCH DATABASE FOR NAME ( ONLY NAME CHECKED ) // DONE
                else if ( JOptionPane.showConfirmDialog ( null, "Conduct a search based on the following?"
                    + "\nName = " + tempname, "SEARCH?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                {
                    String sql = "Select * from visitor where VisitorName='"+tempname+"'";
                    model1.setRowCount(0);
                    
                    try {
                        pst = conn.prepareStatement(sql);
                        rs = pst.executeQuery();
                        Object[] columnData = new Object[9];
                    
                        while (rs.next()){
                            columnData[0] = rs.getString("VisitorID");
                            columnData[1] = rs.getString("VisitorName");
                            columnData[2] = rs.getString("ResidentID");
                            columnData[3] = rs.getString("PhotoIn");
                            columnData[4] = rs.getString("DateEnter");
                            columnData[5] = rs.getString("TimeIn");
                            columnData[6] = rs.getString("PhotoOut");
                            columnData[7] = rs.getString("DateExit");
                            columnData[8] = rs.getString("TimeOut");
                            model1.addRow(columnData);
                        }
                    }
                    catch (Exception e){
                        JOptionPane.showMessageDialog(null, e);
                    }
                    int rows = model1.getRowCount();
                    if ((rows + 1) == 1) {
                        JOptionPane.showMessageDialog(null, "Records Not found \nPlease try again", "Not found", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Records Found!");
                    }
                }
            }
            else 
                JOptionPane.showMessageDialog(null, "No name is given", "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        
        // search based on id filter 
        else if (jCheckBox2.isSelected()){
            if ( !"empty".equals(tempid))
            {
                if ( jCheckBox3.isSelected())
                {
                    // SEARCH FOR ID + DATE ( CHECKED ID AND DATE )// DONE
                    if ( JOptionPane.showConfirmDialog ( null, "Conduct a search based on the following?"
                    + "\nID = " + tempid
                            + "\nDate From = " + tempdatefrom + tab +
                            "To= " + tempdateto, "SEARCH?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                    {
                        String sql = "Select * from visitor where VisitorID='"+tempid+"' and DateEnter between '"+tempdatefrom+"' and '"+tempdateto+"'";
                        model1.setRowCount(0);

                        try {
                            pst = conn.prepareStatement(sql);
                            rs = pst.executeQuery();
                            Object[] columnData = new Object[9];

                            while (rs.next()) {
                                columnData[0] = rs.getString("VisitorID");
                                columnData[1] = rs.getString("VisitorName");
                                columnData[2] = rs.getString("ResidentID");
                                columnData[3] = rs.getString("PhotoIn");
                                columnData[4] = rs.getString("DateEnter");
                                columnData[5] = rs.getString("TimeIn");
                                columnData[6] = rs.getString("PhotoOut");
                                columnData[7] = rs.getString("DateExit");
                                columnData[8] = rs.getString("TimeOut");
                                model1.addRow(columnData);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        int rows = model1.getRowCount();
                        if ((rows + 1) == 1) {
                            JOptionPane.showMessageDialog(null, "Records Not found \nPlease try again", "Not found", JOptionPane.ERROR_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Records Found!");
                        }
                    }
                }
                
                // SEARCH DATABASE FOR ID ( CHECKED ID ) // DONE
                else if ( JOptionPane.showConfirmDialog ( null, "Conduct a search based on the following?"
                    + "\nID = " + tempid , "SEARCH?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                {
                    String sql = "Select * from visitor where VisitorID='"+tempid+"'";
                    model1.setRowCount(0);
                    
                    try {
                        pst = conn.prepareStatement(sql);
                        rs = pst.executeQuery();
                        Object[] columnData = new Object[9];
                    
                        while (rs.next()){
                            columnData[0] = rs.getString("VisitorID");
                            columnData[1] = rs.getString("VisitorName");
                            columnData[2] = rs.getString("ResidentID");
                            columnData[3] = rs.getString("PhotoIn");
                            columnData[4] = rs.getString("DateEnter");
                            columnData[5] = rs.getString("TimeIn");
                            columnData[6] = rs.getString("PhotoOut");
                            columnData[7] = rs.getString("DateExit");
                            columnData[8] = rs.getString("TimeOut");
                            model1.addRow(columnData);
                        }
                    }
                    catch (Exception e){
                        JOptionPane.showMessageDialog(null, e);
                    }
                    int rows = model1.getRowCount();
                    if ((rows + 1) == 1) {
                        JOptionPane.showMessageDialog(null, "Records Not found \nPlease try again", "Not found", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Records Found!");
                    }
                }
            }
            else 
                JOptionPane.showMessageDialog(null, "No ID is given", "ERROR", JOptionPane.WARNING_MESSAGE);
        }
        
        // search based on date from and to //DONE
        else if (jCheckBox3.isSelected()){
            if ( !"empty".equals(tempdatefrom) && !"empty".equals(tempdateto)) {
                if ( JOptionPane.showConfirmDialog ( null, "Conduct a search based on the following?"
                    + "\nDate From = " + tempdatefrom 
                    + tab + "To = " + tempdateto, "SEARCH?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                {
                     String sql = "Select * from visitor where DateEnter between '"+tempdatefrom+"' and '"+tempdateto+"'";
                        model1.setRowCount(0);

                        try {
                            pst = conn.prepareStatement(sql);
                            rs = pst.executeQuery();
                            Object[] columnData = new Object[9];

                            while (rs.next()) {
                                columnData[0] = rs.getString("VisitorID");
                                columnData[1] = rs.getString("VisitorName");
                                columnData[2] = rs.getString("ResidentID");
                                columnData[3] = rs.getString("PhotoIn");
                                columnData[4] = rs.getString("DateEnter");
                                columnData[5] = rs.getString("TimeIn");
                                columnData[6] = rs.getString("PhotoOut");
                                columnData[7] = rs.getString("DateExit");
                                columnData[8] = rs.getString("TimeOut");
                                model1.addRow(columnData);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        int rows = model1.getRowCount();
                        if ((rows + 1) == 1) {
                            JOptionPane.showMessageDialog(null, "Records Not found \nPlease try again", "Not found", JOptionPane.ERROR_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Records Found!");
                        }
                }
            }
            else 
                JOptionPane.showMessageDialog(null, "No Date is given", "ERROR", JOptionPane.WARNING_MESSAGE);
        }

        // search using all filters
        else if ( JOptionPane.showConfirmDialog(null, "Conduct a search based on the following? "
                + "\nName = " + tempname + 
                "\nID = " + tempid +
                "\nDate From = " + tempdatefrom + tab + "To = " + tempdateto, "SEARCH?", JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION)
        {
            String sql = "Select * from visitor where VisitorName='"+tempname+"' and VisitorID='"+tempid+"' and DateEnter between '"+tempdatefrom+"' and '"+tempdateto+"' "; // look for how to connect date here later
            model1.setRowCount(0);

            try {
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                Object[] columnData = new Object[9];

                while (rs.next()) {
                    columnData[0] = rs.getString("VisitorID");
                    columnData[1] = rs.getString("VisitorName");
                    columnData[2] = rs.getString("ResidentID");
                    columnData[3] = rs.getString("PhotoIn");
                    columnData[4] = rs.getString("DateEnter");
                    columnData[5] = rs.getString("TimeIn");
                    columnData[6] = rs.getString("PhotoOut");
                    columnData[7] = rs.getString("DateExit");
                    columnData[8] = rs.getString("TimeOut");
                    model1.addRow(columnData);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            int rows = model1.getRowCount();
            if ((rows + 1) == 1) {
                JOptionPane.showMessageDialog(null, "Records Not found \nPlease try again", "Not found", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Records Found!");
            }
        }
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    // function for button "search illegal visitor" DONE
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        tempdatefrom = jTextField3.getText();
        tempdateto = jTextField4.getText();
        
        if ( jTextField3.getText().equals("yyyy-MM-dd"))
        {
            tempdatefrom ="empty";
        }
        if ( jTextField4.getText().equals("yyyy-MM-dd"))
        {
            tempdateto = "empty";
        }        

        
        if ( JOptionPane.showConfirmDialog(null, "Conduct a search based on the following? " +
                "\nDate From = " + tempdatefrom + tab + "To = " + tempdateto, "SEARCH?", JOptionPane.YES_NO_OPTION)
            == JOptionPane.YES_OPTION)
        {
             String sql = "Select * from illegalvisitor where Date between '"+tempdatefrom+"' and '"+tempdateto+"'";
                        model2.setRowCount(0);

                        try {
                            pst = conn.prepareStatement(sql);
                            rs = pst.executeQuery();
                            Object[] columnData = new Object[9];

                            while (rs.next()) {
                                columnData[0] = rs.getString("IllegalID");
                                columnData[1] = rs.getString("QRCodeContent");
                                columnData[2] = rs.getString("Photo");
                                columnData[3] = rs.getString("Date");
                                columnData[4] = rs.getString("Time");
                                model2.addRow(columnData);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        int rows = model2.getRowCount();
                        if ((rows + 1) == 1) {
                            JOptionPane.showMessageDialog(null, "Records Not found \nPlease try again", "Not found", JOptionPane.ERROR_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Records Found!");
                        }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    //function to call class for camera window NOT YET DONE CAMERA FUNCTION
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
    }//GEN-LAST:event_jButton6ActionPerformed
    
    //function to call for Print Class
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Print print = new Print();
        print.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3MouseClicked

    // update tables in the class
    public void updateTable(){
        String sql = "Select VisitorID, VisitorName, ResidentID, DateEnter, TimeIn from visitor order by DateEnter desc";
        String sql1 = "Select * from visitor";
        String sql2 = "Select * from illegalvisitor";
        
        // update table on main menu
        try {
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            Object[] columnData = new Object[5];
            
            while (rs.next()) {
                columnData[0]=rs.getString("VisitorID");
                columnData[1]=rs.getString("VisitorName");
                columnData[2]=rs.getString("ResidentID");
                columnData[3]=rs.getString("DateEnter");
                columnData[4]=rs.getString("TimeIn");
                model.addRow(columnData);
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
        // update visitor table on report panel
        try {
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            Object[] columnData = new Object[9];
            
            while (rs.next()) {
                columnData[0]=rs.getString("VisitorID");
                columnData[1]=rs.getString("VisitorName");
                columnData[2]=rs.getString("ResidentID");
                columnData[3]=rs.getString("PhotoIn");
                columnData[4]=rs.getString("DateEnter");
                columnData[5]=rs.getString("TimeIn");
                columnData[6]=rs.getString("PhotoOut");
                columnData[7]=rs.getString("DateExit");
                columnData[8]=rs.getString("TimeOut");
                model1.addRow(columnData);
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
        // update illegal visitor table in report panel
        try {
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            Object[] columnData = new Object[5];
            
            while (rs.next()) {
                columnData[0]=rs.getString("IllegalID");
                columnData[1]=rs.getString("QRCodeContent");
                columnData[2]=rs.getString("Photo");
                columnData[3]=rs.getString("Date");
                columnData[4]=rs.getString("Time");
                model2.addRow(columnData);
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cameraPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel parentPanel;
    private javax.swing.JPanel reportPanel;
    // End of variables declaration//GEN-END:variables
}
